install.packages("swirl")
library("swirl")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
library("swirl")
swirl()
0.64
0.64
mypdf
integrate(f=mypdf,lower=0,upper=1.6)
sqrt(2)
0.997*0.001
0.015*0.999
(0.997*0.001)*(0.997*0.001 + 0.015*0.999)
(0.997*0.001)/(0.997*0.001 + 0.015*0.999)
3.5
expect_dice(c(1/6,1/6,1/6,1/6,1/6,1/6))
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh + edl)*0.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
library("swirl")
swirl()
dice_sqr
ex2_fair = sum(dice_sqr * dice_fair)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5**2
ex2_high = sum(dice_high * dice_sqr)
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*(0.8^3)*(0.2^2)
choose(5,3)*(0.8^3)*(0.2^2) + choose(5,4)*(0.8^4)*(0.2^1) + choose(5,5)*(0.8^5)*(0.2^0)
pbinom(q=.02,size=5,prob = .8, lower.tail = False)
pbinom(q=.02,size=5,prob = .8, lower.tail = FALSE)
pbinom(2,size=5,prob = .8, lower.tail = FALSE)
qnorm(0.10)
0
qnorm(0.975, mean = 3, sd = 2)
3 + 2*1.96
pnorm(1200, mean = 1020, sd = 50)
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(.75, mean = 1020, sd = 50)
0.53
0.53
ppois(3, mean = 2.5*4)
ppois(3, mean = 10)
ppois(3, lambda = 10)
ppois(3, 10)
ppois(3, 2.5*4)
pbinom(5, 1000, .01)
ppois(5, 1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
0.60 + c(-1,1)*qnorm(.975)*sqrt(0.6*0.4/100)
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
choose(5,4)*(0.5^4)*(0.5^1) + choose(5,5)*(0.5^5)*(0.5^0)
ppois(2,5)
library("swirl")
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
qt(.975,20)
myplot2(20)
sleep
range(g1)
range(g2)
difference = g2 - g1
difference <- g2 - g1
mean(difference)
s = sd(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975, 9) * s/sqrt(10)
t.test(difference)$conf.int
(8-1)*(15.34)^2 + (21-1)*(18.23)^2
sp = (8-1)*(15.34)^2 + (21-1)*(18.23)^2
ns = 8 + 21 - 2
sp <- sqrt(sp/ns)
(132.86-127.44) + c(-1,1) * qt(.975, ns) * sp * sqrt(1/8 + 1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((var(g2)*10 + var(g1)*10)/18)
sp <- sqrt((var(g2)*9 + var(g1)*9)/18)
sp <- sqrt((var(g1)*9 + var(g2)*9)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,ns)*sp*sqrt(1/10+1/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE)$conf
num <- ((15.34^2)/8 + (18.23^2)/21)^2
den <- (15.34^4)/(8^2)/(8-1)+(18.23^4)/(21^2)/(21-1)
mydf <- num/den
132.86-127.44 + c(-1,1)*qt(.975,mydf)*sqrt((15.34^2)/8 + (18.23^2)/21)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
(32-30)/(10/sqrt(100))
(32-30)/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
t.test(fs$fheight,fs$sheight,paired=TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(q=2.5,df=15,lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2,lower.tail = TRUE)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9, lambda = 5, lower.tail = FALSE)
1100 + c(-1,1)* qt(.95,8) * 30/sqrt(9)
1100 + c(-1,1)* qt(.975,8) * 30/sqrt(9)
-2 + c(-1,1)* qt(.975,8) * 0.3/sqrt(9)
-2 + c(-1,1)* qt(.975,8) * 2.6/sqrt(9)
-2 + c(-1,1)* qt(.975,8) * 2.1/sqrt(9)
-2 + c(-1,1) * qt(.975,18) * sqrt(((9*0.6^2)+(9*0.68^2))/18) * sqrt(2/10)
sp = sqrt(((10-1)*(0.6^2) + (10-1)*(0.68^2))/(10 + 10 - 2))
sp
3-5 + c(-1,1) * qt(.975, 18) * sp * sqrt(0.1 + 0.1)
6-4 + c(-1,1) * qnorm(.975) * sqrt(0.25/100 + 4/100)
-3-1 + c(-1,1) * qt(.95,16) * sqrt((8*1.5^2 + 8*1.8^2)/16) * sqrt(2/9)
exit
g1 <- c(140, 138, 150, 148, 135)
g1
g2 <- c(132, 135, 151, 146, 130)
g2
t.test(g1, g1, paired = TRUE)
t.test(g1, g2, paired = TRUE)
qt(p = .95)
qt(p = .95, df = 8)
qt(p = .975, df = 8)
1100 + c(-1,1)*qt(.975, 8)*30/sqrt(9)
binom.test(3,4)
binom.test(3,4,alternative = "greater")
binom.test(3,4,alternative = "less")
poisson.test(10,1787,(1/1000),alternative = "less")
poisson.test(10,1787,(1/100),alternative = "less")
sp <- (8*(1.5^2) + 8*(1.8^2))/16
sp
-3-1+c(-1,1)*qt(.975,16)*sp*sqrt(2/9)
t = (-3-1)/sqrt( (1.5^2)/9 + (1.8^2)/9)
t
pt(q = t, df = 16)
pt(q = t, df = 16,lower.tail = FALSE)
mua <- .04
n <- 100
alpha <- .05
sigma <- .04
mua
mua <- 0.01
mua
alpha
z <- qnorm(1-alpha)
power <- pnorm(0+z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
power
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$n
swirl()
library("swirl")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, method="bonferroni"))
sum(p.adjust(pValues, method="bonferroni") < .05)
sum(p.adjust(pValues, method="BH") < .05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues2, method="bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method="BH")<.05, trueStatus)
sum(1:6)/6
print(g2)
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh*B, replace=TRUE)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count - Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
rexp(100, 2)
rexp(n=100, rate=2)
rexp(n=100, rate=.2)
rexp(n=40, rate=.2)
knit_with_parameters('~/simulation-exercise.Rmd')
unlink('simulation-exercise_cache', recursive = TRUE)
setwd("~/")
Sys.which('pdflatex')
install.packages('tinytex')
Sys.which('pdflatex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
Sys.which('pdflatex')
pdflatex
Sys.which('pdflatex')
Sys.getenv()
Sys.getenv("RSTUDIO_PANDOC")
tinytex::tinytex_root()
Sys.which('pdflatex')
Sys.which('pdflatex')
unlink('simulation-exercise_cache', recursive = TRUE)
install.packages("pandocfilters")
unlink('simulation-exercise_cache', recursive = TRUE)
n <- 40
lamb <- 0.2
print(paste("Theoretical mean:",1/lamb))
samp <- rexp(n = n, rate = lamb)
print(paste("One-sample mean (n = 40)", mean(samp)))
alpha <- 0.05
ci <- mean(samp) + c(-1,1)*qnorm(1-alpha/2)*(1/lamb)/sqrt(n)
print(ci)
means = NULL
for (i in 1 : 1000) means = c(means, mean(rexp(n = n, rate = lamb)))
hist(means)
abline(v=(1/lamb), col="red", lwd=3, lty=2)
print(paste("Distribution mean:", 1/lamb))
print(paste("Mean of the sample means:", mean(means)))
print(paste("Distribution variance:", 1/lamb^2))
print(paste("Variance of the 1000 sample means:", var(means)))
exponential <- rexp(n=1000, rate=0.2)
hist(exponential)
hist(means)
devtools::session_info('rmarkdown')
install.packages("devtools")
devtools::session_info('rmarkdown')
Sys.which('pdflatex')
Sys.which('xelatex')
n <- 40
lamb <- 0.2
print(paste("Theoretical mean:",1/lamb))
samp <- rexp(n = n, rate = lamb)
print(paste("One-sample mean (n = 40)", mean(samp)))
alpha <- 0.05
ci <- mean(samp) + c(-1,1)*qnorm(1-alpha/2)*(1/lamb)/sqrt(n)
print(ci)
means = NULL
for (i in 1 : 1000) means = c(means, mean(rexp(n = n, rate = lamb)))
hist(means)
abline(v=(1/lamb), col="red", lwd=3, lty=2)
print(paste("Distribution mean:", 1/lamb))
print(paste("Mean of the sample means:", mean(means)))
print(paste("Distribution variance:", 1/lamb^2))
print(paste("Variance of the 1000 sample means:", var(means)))
exponential <- rexp(n=1000, rate=0.2)
hist(exponential)
hist(means)
knit_with_parameters('~/simulation-exercise.Rmd')
unlink('simulation-exercise_cache', recursive = TRUE)
clear
clr
cls
tinytex::parse_packages()
tinytex::parse_packages(log = '*.log')
tinytex::parse_packages(log = 'parse.log')
unlink('simulation-exercise_cache', recursive = TRUE)
data("ToothGrowth")
summary(ToothGrowth)
ToothGrowth[ToothGrowth$len %in% c("OJ","VC")]
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC")]
ToothGrowth
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),]
subdata <- ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),]
subdata$count
subdata$len
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),c(len,supp)]
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),c("len","supp")]
summary(ToothGrowth)
ToothGrowth[ToothGrowth$dose == c(0.5, 1)]
ToothGrowth[ToothGrowth$dose == c(0.5, 1),]
ToothGrowth[ToothGrowth$dose == c(0.5, 1), c("len","dose")]
abs(-3)
getwd()
setwd("C:/Users/BigData/Documents/coursera-r-programming")
setwd("C:/Users/BigData/Documents/Python\ Scripts/coursera-r-programming")
getwd()
dir()
ls
ls()
dir()
source("mycode.R")
second(10)
second(range(10))
range(10)
range(10,5)
?range
1:5
second(1:10)
second(1)
